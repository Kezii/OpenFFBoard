# Brief: Builds firmware source code generated by STM32CubeMX (SW4STM32 toolchain)
#        targeting the STM32F769NI microcontroller (as used in the 32F769IDISCOVERY board).
#
# Author:  Windsor Schmidt. | https://github.com/windsorschmidt
# Adapted by Kezi
# License: MIT License. Contributions welcome.

cmake_minimum_required (VERSION 3.9.4)
set(PROJ "OpenFFBoard")
project (${PROJ})


option(USE_LTO      "Enable LTO"    FALSE)

set(MCU_FAMILY "STM32F4xx")
set(ASM_FILE "Startup/startup_stm32f411retx.s")
set(LINKER_FILE "STM32F411RETX_FLASH.ld")


# For diagnostic tools like rtags.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_C_COMPILER "arm-none-eabi-gcc")
set(CMAKE_CXX_COMPILER "arm-none-eabi-g++")

set(CMAKE_C_FLAGS "-Os -Wall -ffunction-sections -fdata-sections ")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSTM32F411xE -DUSE_HAL_DRIVER  -mtune=cortex-m4 -mcpu=cortex-m4 -mthumb")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=fpv4-sp-d16 -mfloat-abi=hard")

set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "-specs=nano.specs -specs=nosys.specs -T${CMAKE_SOURCE_DIR}/${LINKER_FILE} -Wl,--gc-section")


set(CMSIS_DIR Drivers/CMSIS)
set(DEVICE_DIR Drivers/CMSIS/Device/ST/${MCU_FAMILY})
set(HAL_DIR Drivers/${MCU_FAMILY}_HAL_Driver)



# Set a default build type if none was specified
set(default_build_type "Release")
 
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()



include(CheckIPOSupported)
check_ipo_supported(RESULT supported OUTPUT error)

if( supported AND USE_LTO)
    message(STATUS "IPO / LTO enabled")
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
else()
    message(STATUS "IPO / LTO not supported: <${error}>")
endif()

SET(CMAKE_INSTALL_PREFIX /dev/null)


# Look here for header files.
include_directories(${CMAKE_SOURCE_DIR}/Inc)
include_directories(${CMAKE_SOURCE_DIR}/USB/Inc)
include_directories(${CMAKE_SOURCE_DIR}/UserExtensions/Inc)

include_directories(${CMSIS_DIR}/Include)
include_directories(${DEVICE_DIR}/Include)
include_directories(${HAL_DIR}/Inc)
include_directories(${HAL_DIR}/Inc/Legacy)


set(CMAKE_C_FLAGS_DEBUG "-g")

# Some trickery to get CMake to deal with our assembler code.
set_property(SOURCE ${CMAKE_SOURCE_DIR}/${ASM_FILE} PROPERTY LANGUAGE C)


file(GLOB SOURCE_FILES
  ${CMAKE_SOURCE_DIR}/Src/*.c
  ${CMAKE_SOURCE_DIR}/Src/*.cpp
  ${CMAKE_SOURCE_DIR}/USB/Src/*.c
  ${CMAKE_SOURCE_DIR}/USB/Src/*.cpp
  ${CMAKE_SOURCE_DIR}/UserExtensions/Src/*.c
  ${CMAKE_SOURCE_DIR}/UserExtensions/Src/*.cpp
)

file(GLOB HAL_FILES
  ${HAL_DIR}/Src/*.c
)

list(FILTER HAL_FILES EXCLUDE REGEX "template") 



# The linker flag --gc-section keeps unused object code here from being linked.
add_executable(${PROJ}.elf
  ${SOURCE_FILES}

  ${CMAKE_SOURCE_DIR}/${ASM_FILE}
  ${HAL_FILES}
  )

# Generate assembly listing.
add_custom_command(
  TARGET ${PROJ}.elf
  COMMAND "arm-none-eabi-objcopy"
  ARGS "-O" "binary" "-S" "${PROJ}.elf" "${PROJ}.bin")

add_custom_target(run
    sudo st-flash --reset write "${PROJ}.bin"  0x08000000
    )

# Flash firmware to target.
add_custom_target(flash
  execute_process (
    COMMAND   arm-none-eabi-objcopy -O binary -S firmware.elf firmware.bin
    OUTPUT_VARIABLE outVar
  )


  DEPENDS ${PROJ}.elf
  COMMENT "Flashing target hardware")

# Run OpenOCD as a GDB host.
add_custom_target(gdbhost
  openocd -f interface/stlink-v2-1.cfg -c "transport select hla_swd"
  -f target/stm32f4x.cfg -c "init" -c "reset halt"
  DEPENDS ${PROJ}.elf
  COMMENT "Running OpenOCD as a GDB host.")
